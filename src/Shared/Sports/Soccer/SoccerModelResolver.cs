// <auto-generated />
ï»¿#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace MessagePack.Resolvers
{
    using System;
    using MessagePack;

    public class SoccerModelResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new SoccerModelResolver();

        SoccerModelResolver()
        {

        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;

            static FormatterCache()
            {
                var f = SoccerModelResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class SoccerModelResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static SoccerModelResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(40)
            {
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.League>), 0 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.LeagueGroupStage>), 1 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Leagues.LeagueGroupNote>), 2 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.TeamStanding>), 3 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Enumerations.TeamOutcome>), 4 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.LeagueGroupTable>), 5 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.Commentary>), 6 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.MatchCommentary>), 7 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Matches.MatchPeriod>), 8 },
                {typeof(global::System.Collections.Generic.IDictionary<global::LiveScore.Core.Enumerations.EventType, int>), 9 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.TimelineEvent>), 10 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.Player>), 11 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.SoccerMatch>), 12 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Odds.BetTypeOdds>), 13 },
                {typeof(global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Odds.OddsMovement>), 14 },
                {typeof(global::LiveScore.Soccer.Enumerations.TeamOutcome), 15 },
                {typeof(global::LiveScore.Soccer.Models.Leagues.League), 16 },
                {typeof(global::LiveScore.Soccer.Models.Leagues.LeagueList), 17 },
                {typeof(global::LiveScore.Soccer.Models.Leagues.LeagueGroupStage), 18 },
                {typeof(global::LiveScore.Soccer.Models.Leagues.LeagueGroupStageList), 19 },
                {typeof(global::LiveScore.Soccer.Models.Teams.TeamStanding), 20 },
                {typeof(global::LiveScore.Soccer.Models.Leagues.LeagueGroupTable), 21 },
                {typeof(global::LiveScore.Soccer.Models.Leagues.LeagueTable), 22 },
                {typeof(global::LiveScore.Soccer.Models.Matches.Commentary), 23 },
                {typeof(global::LiveScore.Soccer.Models.Matches.GoalScorer), 24 },
                {typeof(global::LiveScore.Soccer.Models.Matches.MatchCommentary), 25 },
                {typeof(global::LiveScore.Soccer.Models.Matches.MatchCommentaryList), 26 },
                {typeof(global::LiveScore.Soccer.Models.Matches.SoccerMatch), 27 },
                {typeof(global::LiveScore.Soccer.Models.Teams.PlayerType), 28 },
                {typeof(global::LiveScore.Soccer.Models.Teams.Position), 29 },
                {typeof(global::LiveScore.Soccer.Models.Teams.Player), 30 },
                {typeof(global::LiveScore.Soccer.Models.Matches.TimelineEvent), 31 },
                {typeof(global::LiveScore.Soccer.Models.Matches.MatchInfo), 32 },
                {typeof(global::LiveScore.Soccer.Models.Teams.TeamLineups), 33 },
                {typeof(global::LiveScore.Soccer.Models.Matches.MatchLineups), 34 },
                {typeof(global::LiveScore.Soccer.Models.Teams.TeamStatistic), 35 },
                {typeof(global::LiveScore.Soccer.Models.Matches.MatchStatistic), 36 },
                {typeof(global::LiveScore.Soccer.Models.Matches.MatchList), 37 },
                {typeof(global::LiveScore.Soccer.Models.Odds.MatchOdds), 38 },
                {typeof(global::LiveScore.Soccer.Models.Odds.MatchOddsMovement), 39 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key)) return null;

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Soccer.Models.Leagues.League>();
                case 1: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Soccer.Models.Leagues.LeagueGroupStage>();
                case 2: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Core.Models.Leagues.LeagueGroupNote>();
                case 3: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Soccer.Models.Teams.TeamStanding>();
                case 4: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Soccer.Enumerations.TeamOutcome>();
                case 5: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Soccer.Models.Leagues.LeagueGroupTable>();
                case 6: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Soccer.Models.Matches.Commentary>();
                case 7: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Soccer.Models.Matches.MatchCommentary>();
                case 8: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Core.Models.Matches.MatchPeriod>();
                case 9: return new global::MessagePack.Formatters.InterfaceDictionaryFormatter<global::LiveScore.Core.Enumerations.EventType, int>();
                case 10: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Soccer.Models.Matches.TimelineEvent>();
                case 11: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Soccer.Models.Teams.Player>();
                case 12: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Soccer.Models.Matches.SoccerMatch>();
                case 13: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Core.Models.Odds.BetTypeOdds>();
                case 14: return new global::MessagePack.Formatters.InterfaceEnumerableFormatter<global::LiveScore.Core.Models.Odds.OddsMovement>();
                case 15: return new MessagePack.Formatters.LiveScore.Soccer.Enumerations.TeamOutcomeFormatter();
                case 16: return new MessagePack.Formatters.LiveScore.Soccer.Models.Leagues.LeagueFormatter();
                case 17: return new MessagePack.Formatters.LiveScore.Soccer.Models.Leagues.LeagueListFormatter();
                case 18: return new MessagePack.Formatters.LiveScore.Soccer.Models.Leagues.LeagueGroupStageFormatter();
                case 19: return new MessagePack.Formatters.LiveScore.Soccer.Models.Leagues.LeagueGroupStageListFormatter();
                case 20: return new MessagePack.Formatters.LiveScore.Soccer.Models.Teams.TeamStandingFormatter();
                case 21: return new MessagePack.Formatters.LiveScore.Soccer.Models.Leagues.LeagueGroupTableFormatter();
                case 22: return new MessagePack.Formatters.LiveScore.Soccer.Models.Leagues.LeagueTableFormatter();
                case 23: return new MessagePack.Formatters.LiveScore.Soccer.Models.Matches.CommentaryFormatter();
                case 24: return new MessagePack.Formatters.LiveScore.Soccer.Models.Matches.GoalScorerFormatter();
                case 25: return new MessagePack.Formatters.LiveScore.Soccer.Models.Matches.MatchCommentaryFormatter();
                case 26: return new MessagePack.Formatters.LiveScore.Soccer.Models.Matches.MatchCommentaryListFormatter();
                case 27: return new MessagePack.Formatters.LiveScore.Soccer.Models.Matches.SoccerMatchFormatter();
                case 28: return new MessagePack.Formatters.LiveScore.Soccer.Models.Teams.PlayerTypeFormatter();
                case 29: return new MessagePack.Formatters.LiveScore.Soccer.Models.Teams.PositionFormatter();
                case 30: return new MessagePack.Formatters.LiveScore.Soccer.Models.Teams.PlayerFormatter();
                case 31: return new MessagePack.Formatters.LiveScore.Soccer.Models.Matches.TimelineEventFormatter();
                case 32: return new MessagePack.Formatters.LiveScore.Soccer.Models.Matches.MatchInfoFormatter();
                case 33: return new MessagePack.Formatters.LiveScore.Soccer.Models.Teams.TeamLineupsFormatter();
                case 34: return new MessagePack.Formatters.LiveScore.Soccer.Models.Matches.MatchLineupsFormatter();
                case 35: return new MessagePack.Formatters.LiveScore.Soccer.Models.Teams.TeamStatisticFormatter();
                case 36: return new MessagePack.Formatters.LiveScore.Soccer.Models.Matches.MatchStatisticFormatter();
                case 37: return new MessagePack.Formatters.LiveScore.Soccer.Models.Matches.MatchListFormatter();
                case 38: return new MessagePack.Formatters.LiveScore.Soccer.Models.Odds.MatchOddsFormatter();
                case 39: return new MessagePack.Formatters.LiveScore.Soccer.Models.Odds.MatchOddsMovementFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612



#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace MessagePack.Formatters.LiveScore.Soccer.Enumerations
{
    using System;
    using MessagePack;


    public sealed class TeamOutcomeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Enumerations.TeamOutcome>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TeamOutcomeFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "FriendlyName", 0},
                { "DisplayName", 1},
                { "Value", 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("FriendlyName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("DisplayName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Value"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Enumerations.TeamOutcome value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 3);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.FriendlyName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.DisplayName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.Value);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Enumerations.TeamOutcome Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __FriendlyName__ = default(string);
            var __DisplayName__ = default(string);
            var __Value__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __FriendlyName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __DisplayName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __Value__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Enumerations.TeamOutcome();
            ____result.FriendlyName = __FriendlyName__;
            ____result.DisplayName = __DisplayName__;
            ____result.Value = __Value__;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace MessagePack.Formatters.LiveScore.Soccer.Models.Leagues
{
    using System;
    using MessagePack;


    public sealed class LeagueFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Leagues.League>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LeagueFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0},
                { "Name", 1},
                { "Order", 2},
                { "CategoryId", 3},
                { "CountryName", 4},
                { "CountryCode", 5},
                { "IsInternational", 6},
                { "SeasonDates", 7},
                { "RoundGroup", 8},
                { "SeasonId", 9},
                { "HasGroups", 10},
                { "HasStandings", 11},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Id"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Name"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Order"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("CategoryId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("CountryName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("CountryCode"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("IsInternational"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("SeasonDates"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("RoundGroup"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("SeasonId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HasGroups"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HasStandings"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Leagues.League value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 12);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Id, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Name, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.Order);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.CategoryId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.CountryName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[5]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.CountryCode, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[6]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.IsInternational);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[7]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Leagues.LeagueSeasonDates>().Serialize(ref bytes, offset, value.SeasonDates, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[8]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.RoundGroup, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[9]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.SeasonId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[10]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.HasGroups);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[11]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.HasStandings);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Leagues.League Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Id__ = default(string);
            var __Name__ = default(string);
            var __Order__ = default(int);
            var __CategoryId__ = default(string);
            var __CountryName__ = default(string);
            var __CountryCode__ = default(string);
            var __IsInternational__ = default(bool);
            var __SeasonDates__ = default(global::LiveScore.Core.Models.Leagues.LeagueSeasonDates);
            var __RoundGroup__ = default(string);
            var __SeasonId__ = default(string);
            var __HasGroups__ = default(bool);
            var __HasStandings__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __Order__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 3:
                        __CategoryId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 4:
                        __CountryName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 5:
                        __CountryCode__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 6:
                        __IsInternational__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    case 7:
                        __SeasonDates__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Leagues.LeagueSeasonDates>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 8:
                        __RoundGroup__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 9:
                        __SeasonId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 10:
                        __HasGroups__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    case 11:
                        __HasStandings__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Leagues.League(__Id__, __Name__, __Order__, __CategoryId__, __CountryName__, __CountryCode__, __IsInternational__, __SeasonDates__, __RoundGroup__, __SeasonId__, __HasGroups__, __HasStandings__);
            return ____result;
        }
    }


    public sealed class LeagueListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Leagues.LeagueList>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LeagueListFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Leagues", 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Leagues"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Leagues.LeagueList value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 1);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.League>>().Serialize(ref bytes, offset, value.Leagues, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Leagues.LeagueList Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Leagues__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.League>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Leagues__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.League>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Leagues.LeagueList();
            ____result.Leagues = __Leagues__;
            return ____result;
        }
    }


    public sealed class LeagueGroupStageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Leagues.LeagueGroupStage>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LeagueGroupStageFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "LeagueId", 0},
                { "LeagueSeasonId", 1},
                { "GroupStageName", 2},
                { "HasStanding", 3},
                { "LeagueRound", 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueSeasonId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("GroupStageName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HasStanding"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueRound"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Leagues.LeagueGroupStage value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 5);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.LeagueId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.LeagueSeasonId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.GroupStageName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.HasStanding);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Leagues.LeagueRound>().Serialize(ref bytes, offset, value.LeagueRound, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Leagues.LeagueGroupStage Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __LeagueId__ = default(string);
            var __LeagueSeasonId__ = default(string);
            var __GroupStageName__ = default(string);
            var __HasStanding__ = default(bool);
            var __LeagueRound__ = default(global::LiveScore.Core.Models.Leagues.LeagueRound);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __LeagueId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __LeagueSeasonId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __GroupStageName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 3:
                        __HasStanding__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    case 4:
                        __LeagueRound__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Leagues.LeagueRound>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Leagues.LeagueGroupStage(__LeagueId__, __LeagueSeasonId__, __GroupStageName__, __HasStanding__, __LeagueRound__);
            return ____result;
        }
    }


    public sealed class LeagueGroupStageListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Leagues.LeagueGroupStageList>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LeagueGroupStageListFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "LeagueGroupStages", 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueGroupStages"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Leagues.LeagueGroupStageList value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 1);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.LeagueGroupStage>>().Serialize(ref bytes, offset, value.LeagueGroupStages, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Leagues.LeagueGroupStageList Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __LeagueGroupStages__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.LeagueGroupStage>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __LeagueGroupStages__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.LeagueGroupStage>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Leagues.LeagueGroupStageList();
            ____result.LeagueGroupStages = __LeagueGroupStages__;
            return ____result;
        }
    }


    public sealed class LeagueGroupTableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Leagues.LeagueGroupTable>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LeagueGroupTableFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0},
                { "Name", 1},
                { "GroupNotes", 2},
                { "TeamStandings", 3},
                { "OutcomeList", 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Id"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Name"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("GroupNotes"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("TeamStandings"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("OutcomeList"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Leagues.LeagueGroupTable value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 5);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Id, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Name, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Leagues.LeagueGroupNote>>().Serialize(ref bytes, offset, value.GroupNotes, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.TeamStanding>>().Serialize(ref bytes, offset, value.TeamStandings, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Enumerations.TeamOutcome>>().Serialize(ref bytes, offset, value.OutcomeList, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Leagues.LeagueGroupTable Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Id__ = default(string);
            var __Name__ = default(string);
            var __GroupNotes__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Leagues.LeagueGroupNote>);
            var __TeamStandings__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.TeamStanding>);
            var __OutcomeList__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Enumerations.TeamOutcome>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __GroupNotes__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Leagues.LeagueGroupNote>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 3:
                        __TeamStandings__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.TeamStanding>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 4:
                        __OutcomeList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Enumerations.TeamOutcome>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Leagues.LeagueGroupTable(__Id__, __Name__, __GroupNotes__, __TeamStandings__, __OutcomeList__);
            return ____result;
        }
    }


    public sealed class LeagueTableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Leagues.LeagueTable>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public LeagueTableFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "League", 0},
                { "Type", 1},
                { "LeagueSeason", 2},
                { "GroupTables", 3},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("League"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Type"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueSeason"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("GroupTables"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Leagues.LeagueTable value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 4);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Leagues.League>().Serialize(ref bytes, offset, value.League, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.LeagueTableType>().Serialize(ref bytes, offset, value.Type, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Leagues.LeagueSeason>().Serialize(ref bytes, offset, value.LeagueSeason, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.LeagueGroupTable>>().Serialize(ref bytes, offset, value.GroupTables, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Leagues.LeagueTable Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __League__ = default(global::LiveScore.Soccer.Models.Leagues.League);
            var __Type__ = default(global::LiveScore.Core.Enumerations.LeagueTableType);
            var __LeagueSeason__ = default(global::LiveScore.Core.Models.Leagues.LeagueSeason);
            var __GroupTables__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.LeagueGroupTable>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __League__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Leagues.League>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.LeagueTableType>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __LeagueSeason__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Leagues.LeagueSeason>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 3:
                        __GroupTables__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Leagues.LeagueGroupTable>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Leagues.LeagueTable(__League__, __Type__, __LeagueSeason__, __GroupTables__);
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace MessagePack.Formatters.LiveScore.Soccer.Models.Teams
{
    using System;
    using MessagePack;


    public sealed class TeamStandingFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Teams.TeamStanding>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TeamStandingFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0},
                { "Name", 1},
                { "Rank", 2},
                { "Outcome", 3},
                { "Played", 4},
                { "Win", 5},
                { "Draw", 6},
                { "Loss", 7},
                { "GoalsFor", 8},
                { "GoalsAgainst", 9},
                { "GoalDiff", 10},
                { "Points", 11},
                { "Change", 12},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Id"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Name"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Rank"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Outcome"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Played"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Win"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Draw"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Loss"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("GoalsFor"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("GoalsAgainst"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("GoalDiff"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Points"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Change"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Teams.TeamStanding value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 13);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Id, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Name, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.Rank);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Enumerations.TeamOutcome>().Serialize(ref bytes, offset, value.Outcome, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.Played);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[5]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.Win);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[6]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.Draw);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[7]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.Loss);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[8]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.GoalsFor);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[9]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.GoalsAgainst);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[10]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.GoalDiff);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[11]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.Points);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[12]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.Change);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Teams.TeamStanding Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Id__ = default(string);
            var __Name__ = default(string);
            var __Rank__ = default(int);
            var __Outcome__ = default(global::LiveScore.Soccer.Enumerations.TeamOutcome);
            var __Played__ = default(int);
            var __Win__ = default(int);
            var __Draw__ = default(int);
            var __Loss__ = default(int);
            var __GoalsFor__ = default(int);
            var __GoalsAgainst__ = default(int);
            var __GoalDiff__ = default(int);
            var __Points__ = default(int);
            var __Change__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __Rank__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 3:
                        __Outcome__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Enumerations.TeamOutcome>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 4:
                        __Played__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 5:
                        __Win__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 6:
                        __Draw__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 7:
                        __Loss__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 8:
                        __GoalsFor__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 9:
                        __GoalsAgainst__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 10:
                        __GoalDiff__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 11:
                        __Points__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 12:
                        __Change__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Teams.TeamStanding(__Id__, __Name__, __Rank__, __Outcome__, __Played__, __Win__, __Draw__, __Loss__, __GoalsFor__, __GoalsAgainst__, __GoalDiff__, __Points__, __Change__);
            return ____result;
        }
    }


    public sealed class PlayerTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Teams.PlayerType>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PlayerTypeFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "DisplayName", 0},
                { "Value", 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("DisplayName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Value"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Teams.PlayerType value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 2);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.DisplayName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.Value);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Teams.PlayerType Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __DisplayName__ = default(string);
            var __Value__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __DisplayName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Value__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Teams.PlayerType();
            ____result.DisplayName = __DisplayName__;
            ____result.Value = __Value__;
            return ____result;
        }
    }


    public sealed class PositionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Teams.Position>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PositionFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "DisplayName", 0},
                { "Value", 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("DisplayName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Value"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Teams.Position value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 2);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.DisplayName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.Value);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Teams.Position Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __DisplayName__ = default(string);
            var __Value__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __DisplayName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Value__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Teams.Position();
            ____result.DisplayName = __DisplayName__;
            ____result.Value = __Value__;
            return ____result;
        }
    }


    public sealed class PlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Teams.Player>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public PlayerFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0},
                { "Name", 1},
                { "Type", 2},
                { "JerseyNumber", 3},
                { "Position", 4},
                { "Order", 5},
                { "EventStatistic", 6},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Id"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Name"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Type"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("JerseyNumber"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Position"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Order"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("EventStatistic"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Teams.Player value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 7);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Id, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Name, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.PlayerType>().Serialize(ref bytes, offset, value.Type, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.JerseyNumber);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Position>().Serialize(ref bytes, offset, value.Position, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[5]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.Order);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[6]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IDictionary<global::LiveScore.Core.Enumerations.EventType, int>>().Serialize(ref bytes, offset, value.EventStatistic, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Teams.Player Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Id__ = default(string);
            var __Name__ = default(string);
            var __Type__ = default(global::LiveScore.Soccer.Models.Teams.PlayerType);
            var __JerseyNumber__ = default(int);
            var __Position__ = default(global::LiveScore.Soccer.Models.Teams.Position);
            var __Order__ = default(int);
            var __EventStatistic__ = default(global::System.Collections.Generic.IDictionary<global::LiveScore.Core.Enumerations.EventType, int>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.PlayerType>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 3:
                        __JerseyNumber__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 4:
                        __Position__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Position>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 5:
                        __Order__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 6:
                        __EventStatistic__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IDictionary<global::LiveScore.Core.Enumerations.EventType, int>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Teams.Player();
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.Type = __Type__;
            ____result.JerseyNumber = __JerseyNumber__;
            ____result.Position = __Position__;
            ____result.Order = __Order__;
            ____result.EventStatistic = __EventStatistic__;
            return ____result;
        }
    }


    public sealed class TeamLineupsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Teams.TeamLineups>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TeamLineupsFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0},
                { "Name", 1},
                { "IsHome", 2},
                { "Coach", 3},
                { "Formation", 4},
                { "Players", 5},
                { "Substitutions", 6},
                { "SubstitutionEvents", 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Id"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Name"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("IsHome"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Coach"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Formation"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Players"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Substitutions"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("SubstitutionEvents"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Teams.TeamLineups value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 8);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Id, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Name, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.IsHome);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Teams.Coach>().Serialize(ref bytes, offset, value.Coach, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Formation, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[5]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.Player>>().Serialize(ref bytes, offset, value.Players, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[6]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.Player>>().Serialize(ref bytes, offset, value.Substitutions, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[7]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.TimelineEvent>>().Serialize(ref bytes, offset, value.SubstitutionEvents, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Teams.TeamLineups Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Id__ = default(string);
            var __Name__ = default(string);
            var __IsHome__ = default(bool);
            var __Coach__ = default(global::LiveScore.Core.Models.Teams.Coach);
            var __Formation__ = default(string);
            var __Players__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.Player>);
            var __Substitutions__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.Player>);
            var __SubstitutionEvents__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.TimelineEvent>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __IsHome__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    case 3:
                        __Coach__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Teams.Coach>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 4:
                        __Formation__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 5:
                        __Players__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.Player>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 6:
                        __Substitutions__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Teams.Player>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 7:
                        __SubstitutionEvents__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.TimelineEvent>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Teams.TeamLineups(__Id__, __Name__, __IsHome__, __Coach__, __Formation__, __Players__, __Substitutions__, __SubstitutionEvents__);
            return ____result;
        }
    }


    public sealed class TeamStatisticFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Teams.TeamStatistic>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TeamStatisticFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Possession", 0},
                { "FreeKicks", 1},
                { "ThrowIns", 2},
                { "GoalKicks", 3},
                { "ShotsBlocked", 4},
                { "ShotsOnTarget", 5},
                { "ShotsOffTarget", 6},
                { "CornerKicks", 7},
                { "Fouls", 8},
                { "ShotsSaved", 9},
                { "Offsides", 10},
                { "YellowCards", 11},
                { "Injuries", 12},
                { "RedCards", 13},
                { "YellowRedCards", 14},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Possession"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("FreeKicks"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("ThrowIns"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("GoalKicks"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("ShotsBlocked"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("ShotsOnTarget"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("ShotsOffTarget"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("CornerKicks"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Fouls"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("ShotsSaved"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Offsides"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("YellowCards"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Injuries"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("RedCards"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("YellowRedCards"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Teams.TeamStatistic value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 15);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.Possession);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.FreeKicks);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.ThrowIns);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.GoalKicks);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.ShotsBlocked);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[5]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.ShotsOnTarget);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[6]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.ShotsOffTarget);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[7]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.CornerKicks);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[8]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.Fouls);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[9]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.ShotsSaved);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[10]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.Offsides);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[11]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.YellowCards);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[12]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.Injuries);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[13]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.RedCards);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[14]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.YellowRedCards);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Teams.TeamStatistic Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Possession__ = default(byte);
            var __FreeKicks__ = default(byte);
            var __ThrowIns__ = default(byte);
            var __GoalKicks__ = default(byte);
            var __ShotsBlocked__ = default(byte);
            var __ShotsOnTarget__ = default(byte);
            var __ShotsOffTarget__ = default(byte);
            var __CornerKicks__ = default(byte);
            var __Fouls__ = default(byte);
            var __ShotsSaved__ = default(byte);
            var __Offsides__ = default(byte);
            var __YellowCards__ = default(byte);
            var __Injuries__ = default(byte);
            var __RedCards__ = default(byte);
            var __YellowRedCards__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Possession__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 1:
                        __FreeKicks__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 2:
                        __ThrowIns__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 3:
                        __GoalKicks__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 4:
                        __ShotsBlocked__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 5:
                        __ShotsOnTarget__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 6:
                        __ShotsOffTarget__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 7:
                        __CornerKicks__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 8:
                        __Fouls__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 9:
                        __ShotsSaved__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 10:
                        __Offsides__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 11:
                        __YellowCards__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 12:
                        __Injuries__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 13:
                        __RedCards__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 14:
                        __YellowRedCards__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Teams.TeamStatistic(__Possession__, __FreeKicks__, __ThrowIns__, __GoalKicks__, __ShotsBlocked__, __ShotsOnTarget__, __ShotsOffTarget__, __CornerKicks__, __Fouls__, __ShotsSaved__, __Offsides__, __YellowCards__, __Injuries__, __RedCards__, __YellowRedCards__);
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace MessagePack.Formatters.LiveScore.Soccer.Models.Matches
{
    using System;
    using MessagePack;


    public sealed class CommentaryFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Matches.Commentary>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public CommentaryFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Text", 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Text"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Matches.Commentary value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 1);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Text, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Matches.Commentary Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Text__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Text__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Matches.Commentary();
            ____result.Text = __Text__;
            return ____result;
        }
    }


    public sealed class GoalScorerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Matches.GoalScorer>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public GoalScorerFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0},
                { "Name", 1},
                { "Method", 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Id"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Name"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Method"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Matches.GoalScorer value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 3);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Id, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Name, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Method, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Matches.GoalScorer Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Id__ = default(string);
            var __Name__ = default(string);
            var __Method__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __Method__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Matches.GoalScorer();
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.Method = __Method__;
            return ____result;
        }
    }


    public sealed class MatchCommentaryFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Matches.MatchCommentary>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MatchCommentaryFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "TimelineId", 0},
                { "TimelineType", 1},
                { "Time", 2},
                { "MatchTime", 3},
                { "StoppageTime", 4},
                { "Commentaries", 5},
                { "GoalScorer", 6},
                { "IsPenaltyShootOutScored", 7},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("TimelineId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("TimelineType"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Time"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("MatchTime"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("StoppageTime"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Commentaries"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("GoalScorer"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("IsPenaltyShootOutScored"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Matches.MatchCommentary value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 8);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.TimelineId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.EventType>().Serialize(ref bytes, offset, value.TimelineType, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref bytes, offset, value.Time, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.MatchTime);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.StoppageTime, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[5]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.Commentary>>().Serialize(ref bytes, offset, value.Commentaries, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[6]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Matches.GoalScorer>().Serialize(ref bytes, offset, value.GoalScorer, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[7]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.IsPenaltyShootOutScored);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Matches.MatchCommentary Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __TimelineId__ = default(string);
            var __TimelineType__ = default(global::LiveScore.Core.Enumerations.EventType);
            var __Time__ = default(global::System.DateTimeOffset);
            var __MatchTime__ = default(byte);
            var __StoppageTime__ = default(string);
            var __Commentaries__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.Commentary>);
            var __GoalScorer__ = default(global::LiveScore.Soccer.Models.Matches.GoalScorer);
            var __IsPenaltyShootOutScored__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __TimelineId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __TimelineType__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.EventType>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __Time__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 3:
                        __MatchTime__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 4:
                        __StoppageTime__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 5:
                        __Commentaries__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.Commentary>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 6:
                        __GoalScorer__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Matches.GoalScorer>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 7:
                        __IsPenaltyShootOutScored__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Matches.MatchCommentary(__TimelineId__, __TimelineType__, __Time__, __MatchTime__, __StoppageTime__, __Commentaries__, __GoalScorer__, __IsPenaltyShootOutScored__);
            return ____result;
        }
    }


    public sealed class MatchCommentaryListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Matches.MatchCommentaryList>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MatchCommentaryListFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "MatchCommentaries", 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("MatchCommentaries"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Matches.MatchCommentaryList value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 1);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.MatchCommentary>>().Serialize(ref bytes, offset, value.MatchCommentaries, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Matches.MatchCommentaryList Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __MatchCommentaries__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.MatchCommentary>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __MatchCommentaries__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.MatchCommentary>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Matches.MatchCommentaryList();
            ____result.MatchCommentaries = __MatchCommentaries__;
            return ____result;
        }
    }


    public sealed class SoccerMatchFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Matches.SoccerMatch>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public SoccerMatchFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0},
                { "EventDate", 1},
                { "CurrentPeriodStartTime", 2},
                { "LeagueId", 3},
                { "LeagueName", 4},
                { "HomeTeamId", 5},
                { "HomeTeamName", 6},
                { "AwayTeamId", 7},
                { "AwayTeamName", 8},
                { "MatchStatus", 9},
                { "EventStatus", 10},
                { "HomeScore", 11},
                { "AwayScore", 12},
                { "WinnerId", 13},
                { "AggregateWinnerId", 14},
                { "AggregateHomeScore", 15},
                { "AggregateAwayScore", 16},
                { "HomeRedCards", 17},
                { "HomeYellowRedCards", 18},
                { "AwayRedCards", 19},
                { "AwayYellowRedCards", 20},
                { "MatchTime", 21},
                { "StoppageTime", 22},
                { "InjuryTimeAnnounced", 23},
                { "LastTimelineType", 24},
                { "MatchPeriods", 25},
                { "CountryCode", 26},
                { "CountryName", 27},
                { "ModifiedTime", 28},
                { "IsInternationalLeague", 29},
                { "LeagueOrder", 30},
                { "LeagueSeasonId", 31},
                { "LeagueRoundType", 32},
                { "LeagueRoundName", 33},
                { "LeagueRoundNumber", 34},
                { "LeagueRoundGroup", 35},
                { "LeagueGroupName", 36},
                { "Coverage", 37},
                { "LeagueHasStandings", 38},
                { "GroupName", 39},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Id"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("EventDate"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("CurrentPeriodStartTime"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HomeTeamId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HomeTeamName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AwayTeamId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AwayTeamName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("MatchStatus"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("EventStatus"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HomeScore"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AwayScore"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("WinnerId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AggregateWinnerId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AggregateHomeScore"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AggregateAwayScore"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HomeRedCards"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HomeYellowRedCards"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AwayRedCards"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AwayYellowRedCards"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("MatchTime"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("StoppageTime"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("InjuryTimeAnnounced"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LastTimelineType"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("MatchPeriods"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("CountryCode"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("CountryName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("ModifiedTime"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("IsInternationalLeague"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueOrder"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueSeasonId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueRoundType"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueRoundName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueRoundNumber"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueRoundGroup"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueGroupName"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Coverage"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("LeagueHasStandings"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("GroupName"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Matches.SoccerMatch value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteMapHeader(ref bytes, offset, 40);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Id, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref bytes, offset, value.EventDate, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref bytes, offset, value.CurrentPeriodStartTime, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.LeagueId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.LeagueName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[5]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.HomeTeamId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[6]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.HomeTeamName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[7]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.AwayTeamId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[8]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.AwayTeamName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[9]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.MatchStatus>().Serialize(ref bytes, offset, value.MatchStatus, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[10]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.MatchStatus>().Serialize(ref bytes, offset, value.EventStatus, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[11]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.HomeScore);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[12]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.AwayScore);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[13]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.WinnerId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[14]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.AggregateWinnerId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[15]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.AggregateHomeScore);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[16]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.AggregateAwayScore);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[17]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.HomeRedCards);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[18]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.HomeYellowRedCards);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[19]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.AwayRedCards);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[20]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.AwayYellowRedCards);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[21]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.MatchTime);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[22]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.StoppageTime, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[23]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.InjuryTimeAnnounced);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[24]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.EventType>().Serialize(ref bytes, offset, value.LastTimelineType, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[25]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Matches.MatchPeriod>>().Serialize(ref bytes, offset, value.MatchPeriods, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[26]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.CountryCode, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[27]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.CountryName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[28]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref bytes, offset, value.ModifiedTime, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[29]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.IsInternationalLeague);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[30]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.LeagueOrder);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[31]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.LeagueSeasonId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[32]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.LeagueRoundType>().Serialize(ref bytes, offset, value.LeagueRoundType, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[33]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.LeagueRoundName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[34]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.LeagueRoundNumber);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[35]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.LeagueRoundGroup, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[36]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.LeagueGroupName, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[37]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Matches.Coverage>().Serialize(ref bytes, offset, value.Coverage, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[38]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.LeagueHasStandings);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[39]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.GroupName, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Matches.SoccerMatch Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Id__ = default(string);
            var __EventDate__ = default(global::System.DateTimeOffset);
            var __CurrentPeriodStartTime__ = default(global::System.DateTimeOffset);
            var __LeagueId__ = default(string);
            var __LeagueName__ = default(string);
            var __HomeTeamId__ = default(string);
            var __HomeTeamName__ = default(string);
            var __AwayTeamId__ = default(string);
            var __AwayTeamName__ = default(string);
            var __MatchStatus__ = default(global::LiveScore.Core.Enumerations.MatchStatus);
            var __EventStatus__ = default(global::LiveScore.Core.Enumerations.MatchStatus);
            var __HomeScore__ = default(byte);
            var __AwayScore__ = default(byte);
            var __WinnerId__ = default(string);
            var __AggregateWinnerId__ = default(string);
            var __AggregateHomeScore__ = default(byte);
            var __AggregateAwayScore__ = default(byte);
            var __HomeRedCards__ = default(byte);
            var __HomeYellowRedCards__ = default(byte);
            var __AwayRedCards__ = default(byte);
            var __AwayYellowRedCards__ = default(byte);
            var __MatchTime__ = default(byte);
            var __StoppageTime__ = default(string);
            var __InjuryTimeAnnounced__ = default(byte);
            var __LastTimelineType__ = default(global::LiveScore.Core.Enumerations.EventType);
            var __MatchPeriods__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Matches.MatchPeriod>);
            var __CountryCode__ = default(string);
            var __CountryName__ = default(string);
            var __ModifiedTime__ = default(global::System.DateTimeOffset);
            var __IsInternationalLeague__ = default(bool);
            var __LeagueOrder__ = default(int);
            var __LeagueSeasonId__ = default(string);
            var __LeagueRoundType__ = default(global::LiveScore.Core.Enumerations.LeagueRoundType);
            var __LeagueRoundName__ = default(string);
            var __LeagueRoundNumber__ = default(int);
            var __LeagueRoundGroup__ = default(string);
            var __LeagueGroupName__ = default(string);
            var __Coverage__ = default(global::LiveScore.Core.Models.Matches.Coverage);
            var __LeagueHasStandings__ = default(bool);
            var __GroupName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __EventDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __CurrentPeriodStartTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 3:
                        __LeagueId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 4:
                        __LeagueName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 5:
                        __HomeTeamId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 6:
                        __HomeTeamName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 7:
                        __AwayTeamId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 8:
                        __AwayTeamName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 9:
                        __MatchStatus__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.MatchStatus>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 10:
                        __EventStatus__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.MatchStatus>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 11:
                        __HomeScore__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 12:
                        __AwayScore__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 13:
                        __WinnerId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 14:
                        __AggregateWinnerId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 15:
                        __AggregateHomeScore__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 16:
                        __AggregateAwayScore__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 17:
                        __HomeRedCards__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 18:
                        __HomeYellowRedCards__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 19:
                        __AwayRedCards__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 20:
                        __AwayYellowRedCards__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 21:
                        __MatchTime__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 22:
                        __StoppageTime__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 23:
                        __InjuryTimeAnnounced__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 24:
                        __LastTimelineType__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.EventType>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 25:
                        __MatchPeriods__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Matches.MatchPeriod>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 26:
                        __CountryCode__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 27:
                        __CountryName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 28:
                        __ModifiedTime__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 29:
                        __IsInternationalLeague__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    case 30:
                        __LeagueOrder__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 31:
                        __LeagueSeasonId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 32:
                        __LeagueRoundType__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.LeagueRoundType>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 33:
                        __LeagueRoundName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 34:
                        __LeagueRoundNumber__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    case 35:
                        __LeagueRoundGroup__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 36:
                        __LeagueGroupName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 37:
                        __Coverage__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Matches.Coverage>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 38:
                        __LeagueHasStandings__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    case 39:
                        __GroupName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Matches.SoccerMatch(__Id__, __EventDate__, __CurrentPeriodStartTime__, __LeagueId__, __LeagueName__, __HomeTeamId__, __HomeTeamName__, __AwayTeamId__, __AwayTeamName__, __MatchStatus__, __EventStatus__, __HomeScore__, __AwayScore__, __WinnerId__, __AggregateWinnerId__, __AggregateHomeScore__, __AggregateAwayScore__, __HomeRedCards__, __HomeYellowRedCards__, __AwayRedCards__, __AwayYellowRedCards__, __MatchTime__, __StoppageTime__, __InjuryTimeAnnounced__, __LastTimelineType__, __MatchPeriods__, __CountryCode__, __CountryName__, __ModifiedTime__, __IsInternationalLeague__, __LeagueOrder__, __LeagueSeasonId__, __LeagueRoundType__, __LeagueRoundName__, __LeagueRoundNumber__, __LeagueRoundGroup__, __LeagueGroupName__, __Coverage__, __LeagueHasStandings__, __GroupName__);
            ____result.CurrentPeriodStartTime = __CurrentPeriodStartTime__;
            ____result.InjuryTimeAnnounced = __InjuryTimeAnnounced__;
            return ____result;
        }
    }


    public sealed class TimelineEventFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Matches.TimelineEvent>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public TimelineEventFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0},
                { "Name", 1},
                { "Type", 2},
                { "Time", 3},
                { "MatchTime", 4},
                { "StoppageTime", 5},
                { "MatchClock", 6},
                { "Team", 7},
                { "Period", 8},
                { "PeriodType", 9},
                { "HomeScore", 10},
                { "AwayScore", 11},
                { "GoalScorer", 12},
                { "Assist", 13},
                { "Player", 14},
                { "InjuryTimeAnnounced", 15},
                { "HomeShootoutPlayer", 16},
                { "IsHomeShootoutScored", 17},
                { "AwayShootoutPlayer", 18},
                { "IsAwayShootoutScored", 19},
                { "ShootoutHomeScore", 20},
                { "ShootoutAwayScore", 21},
                { "IsHome", 22},
                { "PlayerIn", 23},
                { "PlayerOut", 24},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Id"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Name"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Type"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Time"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("MatchTime"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("StoppageTime"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("MatchClock"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Team"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Period"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("PeriodType"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HomeScore"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AwayScore"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("GoalScorer"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Assist"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Player"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("InjuryTimeAnnounced"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HomeShootoutPlayer"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("IsHomeShootoutScored"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AwayShootoutPlayer"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("IsAwayShootoutScored"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("ShootoutHomeScore"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("ShootoutAwayScore"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("IsHome"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("PlayerIn"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("PlayerOut"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Matches.TimelineEvent value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteMapHeader(ref bytes, offset, 25);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Id, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Name, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.EventType>().Serialize(ref bytes, offset, value.Type, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref bytes, offset, value.Time, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.MatchTime);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[5]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.StoppageTime, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[6]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.MatchClock, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[7]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Team, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[8]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.Period);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[9]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.PeriodType>().Serialize(ref bytes, offset, value.PeriodType, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[10]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.HomeScore);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[11]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.AwayScore);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[12]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Matches.GoalScorer>().Serialize(ref bytes, offset, value.GoalScorer, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[13]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Serialize(ref bytes, offset, value.Assist, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[14]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Serialize(ref bytes, offset, value.Player, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[15]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.InjuryTimeAnnounced);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[16]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Serialize(ref bytes, offset, value.HomeShootoutPlayer, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[17]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.IsHomeShootoutScored);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[18]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Serialize(ref bytes, offset, value.AwayShootoutPlayer, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[19]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.IsAwayShootoutScored);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[20]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.ShootoutHomeScore);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[21]);
            offset += MessagePackBinary.WriteByte(ref bytes, offset, value.ShootoutAwayScore);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[22]);
            offset += MessagePackBinary.WriteBoolean(ref bytes, offset, value.IsHome);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[23]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Serialize(ref bytes, offset, value.PlayerIn, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[24]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Serialize(ref bytes, offset, value.PlayerOut, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Matches.TimelineEvent Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Id__ = default(string);
            var __Name__ = default(string);
            var __Type__ = default(global::LiveScore.Core.Enumerations.EventType);
            var __Time__ = default(global::System.DateTimeOffset);
            var __MatchTime__ = default(byte);
            var __StoppageTime__ = default(string);
            var __MatchClock__ = default(string);
            var __Team__ = default(string);
            var __Period__ = default(byte);
            var __PeriodType__ = default(global::LiveScore.Core.Enumerations.PeriodType);
            var __HomeScore__ = default(byte);
            var __AwayScore__ = default(byte);
            var __GoalScorer__ = default(global::LiveScore.Soccer.Models.Matches.GoalScorer);
            var __Assist__ = default(global::LiveScore.Soccer.Models.Teams.Player);
            var __Player__ = default(global::LiveScore.Soccer.Models.Teams.Player);
            var __InjuryTimeAnnounced__ = default(byte);
            var __HomeShootoutPlayer__ = default(global::LiveScore.Soccer.Models.Teams.Player);
            var __IsHomeShootoutScored__ = default(bool);
            var __AwayShootoutPlayer__ = default(global::LiveScore.Soccer.Models.Teams.Player);
            var __IsAwayShootoutScored__ = default(bool);
            var __ShootoutHomeScore__ = default(byte);
            var __ShootoutAwayScore__ = default(byte);
            var __IsHome__ = default(bool);
            var __PlayerIn__ = default(global::LiveScore.Soccer.Models.Teams.Player);
            var __PlayerOut__ = default(global::LiveScore.Soccer.Models.Teams.Player);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.EventType>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 3:
                        __Time__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 4:
                        __MatchTime__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 5:
                        __StoppageTime__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 6:
                        __MatchClock__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 7:
                        __Team__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 8:
                        __Period__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 9:
                        __PeriodType__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Enumerations.PeriodType>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 10:
                        __HomeScore__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 11:
                        __AwayScore__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 12:
                        __GoalScorer__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Matches.GoalScorer>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 13:
                        __Assist__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 14:
                        __Player__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 15:
                        __InjuryTimeAnnounced__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 16:
                        __HomeShootoutPlayer__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 17:
                        __IsHomeShootoutScored__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    case 18:
                        __AwayShootoutPlayer__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 19:
                        __IsAwayShootoutScored__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    case 20:
                        __ShootoutHomeScore__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 21:
                        __ShootoutAwayScore__ = MessagePackBinary.ReadByte(bytes, offset, out readSize);
                        break;
                    case 22:
                        __IsHome__ = MessagePackBinary.ReadBoolean(bytes, offset, out readSize);
                        break;
                    case 23:
                        __PlayerIn__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 24:
                        __PlayerOut__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.Player>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Matches.TimelineEvent();
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.Type = __Type__;
            ____result.Time = __Time__;
            ____result.MatchTime = __MatchTime__;
            ____result.StoppageTime = __StoppageTime__;
            ____result.MatchClock = __MatchClock__;
            ____result.Team = __Team__;
            ____result.Period = __Period__;
            ____result.PeriodType = __PeriodType__;
            ____result.HomeScore = __HomeScore__;
            ____result.AwayScore = __AwayScore__;
            ____result.GoalScorer = __GoalScorer__;
            ____result.Assist = __Assist__;
            ____result.Player = __Player__;
            ____result.InjuryTimeAnnounced = __InjuryTimeAnnounced__;
            ____result.HomeShootoutPlayer = __HomeShootoutPlayer__;
            ____result.IsHomeShootoutScored = __IsHomeShootoutScored__;
            ____result.AwayShootoutPlayer = __AwayShootoutPlayer__;
            ____result.IsAwayShootoutScored = __IsAwayShootoutScored__;
            ____result.ShootoutHomeScore = __ShootoutHomeScore__;
            ____result.ShootoutAwayScore = __ShootoutAwayScore__;
            ____result.IsHome = __IsHome__;
            ____result.PlayerIn = __PlayerIn__;
            ____result.PlayerOut = __PlayerOut__;
            return ____result;
        }
    }


    public sealed class MatchInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Matches.MatchInfo>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MatchInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Match", 0},
                { "TimelineEvents", 1},
                { "Venue", 2},
                { "Referee", 3},
                { "Attendance", 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Match"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("TimelineEvents"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Venue"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Referee"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Attendance"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Matches.MatchInfo value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 5);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Matches.SoccerMatch>().Serialize(ref bytes, offset, value.Match, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.TimelineEvent>>().Serialize(ref bytes, offset, value.TimelineEvents, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Matches.Venue>().Serialize(ref bytes, offset, value.Venue, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Referee, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += MessagePackBinary.WriteInt32(ref bytes, offset, value.Attendance);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Matches.MatchInfo Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Match__ = default(global::LiveScore.Soccer.Models.Matches.SoccerMatch);
            var __TimelineEvents__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.TimelineEvent>);
            var __Venue__ = default(global::LiveScore.Core.Models.Matches.Venue);
            var __Referee__ = default(string);
            var __Attendance__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Match__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Matches.SoccerMatch>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __TimelineEvents__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.TimelineEvent>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __Venue__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Matches.Venue>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 3:
                        __Referee__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 4:
                        __Attendance__ = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Matches.MatchInfo(__Match__, __TimelineEvents__, __Venue__, __Referee__, __Attendance__);
            return ____result;
        }
    }


    public sealed class MatchLineupsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Matches.MatchLineups>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MatchLineupsFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0},
                { "EventDate", 1},
                { "Home", 2},
                { "Away", 3},
                { "PitchView", 4},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Id"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("EventDate"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Home"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Away"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("PitchView"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Matches.MatchLineups value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 5);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.Id, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref bytes, offset, value.EventDate, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.TeamLineups>().Serialize(ref bytes, offset, value.Home, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[3]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.TeamLineups>().Serialize(ref bytes, offset, value.Away, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[4]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.PitchView, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Matches.MatchLineups Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Id__ = default(string);
            var __EventDate__ = default(global::System.DateTimeOffset);
            var __Home__ = default(global::LiveScore.Soccer.Models.Teams.TeamLineups);
            var __Away__ = default(global::LiveScore.Soccer.Models.Teams.TeamLineups);
            var __PitchView__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __EventDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __Home__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.TeamLineups>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 3:
                        __Away__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.TeamLineups>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 4:
                        __PitchView__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Matches.MatchLineups(__Id__, __EventDate__, __Home__, __Away__, __PitchView__);
            return ____result;
        }
    }


    public sealed class MatchStatisticFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Matches.MatchStatistic>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MatchStatisticFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "MatchId", 0},
                { "HomeStatistic", 1},
                { "AwayStatistic", 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("MatchId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("HomeStatistic"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("AwayStatistic"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Matches.MatchStatistic value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 3);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.MatchId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.TeamStatistic>().Serialize(ref bytes, offset, value.HomeStatistic, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.TeamStatistic>().Serialize(ref bytes, offset, value.AwayStatistic, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Matches.MatchStatistic Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __MatchId__ = default(string);
            var __HomeStatistic__ = default(global::LiveScore.Soccer.Models.Teams.TeamStatistic);
            var __AwayStatistic__ = default(global::LiveScore.Soccer.Models.Teams.TeamStatistic);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __MatchId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __HomeStatistic__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.TeamStatistic>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __AwayStatistic__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Soccer.Models.Teams.TeamStatistic>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Matches.MatchStatistic(__MatchId__, __HomeStatistic__, __AwayStatistic__);
            return ____result;
        }
    }


    public sealed class MatchListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Matches.MatchList>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MatchListFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Matches", 0},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Matches"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Matches.MatchList value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 1);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.SoccerMatch>>().Serialize(ref bytes, offset, value.Matches, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Matches.MatchList Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __Matches__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.SoccerMatch>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __Matches__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Soccer.Models.Matches.SoccerMatch>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Matches.MatchList();
            ____result.Matches = __Matches__;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace MessagePack.Formatters.LiveScore.Soccer.Models.Odds
{
    using System;
    using MessagePack;


    public sealed class MatchOddsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Odds.MatchOdds>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MatchOddsFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "MatchId", 0},
                { "BetTypeOddsList", 1},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("MatchId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("BetTypeOddsList"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Odds.MatchOdds value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 2);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.MatchId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Odds.BetTypeOdds>>().Serialize(ref bytes, offset, value.BetTypeOddsList, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Odds.MatchOdds Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __MatchId__ = default(string);
            var __BetTypeOddsList__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Odds.BetTypeOdds>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __MatchId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __BetTypeOddsList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Odds.BetTypeOdds>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Odds.MatchOdds(__MatchId__, __BetTypeOddsList__);
            return ____result;
        }
    }


    public sealed class MatchOddsMovementFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LiveScore.Soccer.Models.Odds.MatchOddsMovement>
    {

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public MatchOddsMovementFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "MatchId", 0},
                { "Bookmaker", 1},
                { "OddsMovements", 2},
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("MatchId"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("Bookmaker"),
                global::MessagePack.MessagePackBinary.GetEncodedStringBytes("OddsMovements"),
                
            };
        }


        public int Serialize(ref byte[] bytes, int offset, global::LiveScore.Soccer.Models.Odds.MatchOddsMovement value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                return global::MessagePack.MessagePackBinary.WriteNil(ref bytes, offset);
            }
            
            var startOffset = offset;
            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(ref bytes, offset, 3);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[0]);
            offset += formatterResolver.GetFormatterWithVerify<string>().Serialize(ref bytes, offset, value.MatchId, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[1]);
            offset += formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Odds.Bookmaker>().Serialize(ref bytes, offset, value.Bookmaker, formatterResolver);
            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, offset, this.____stringByteKeys[2]);
            offset += formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Odds.OddsMovement>>().Serialize(ref bytes, offset, value.OddsMovements, formatterResolver);
            return offset - startOffset;
        }

        public global::LiveScore.Soccer.Models.Odds.MatchOddsMovement Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))
            {
                readSize = 1;
                return null;
            }

            var startOffset = offset;
            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(bytes, offset, out readSize);
            offset += readSize;

            var __MatchId__ = default(string);
            var __Bookmaker__ = default(global::LiveScore.Core.Models.Odds.Bookmaker);
            var __OddsMovements__ = default(global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Odds.OddsMovement>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }

                switch (key)
                {
                    case 0:
                        __MatchId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 1:
                        __Bookmaker__ = formatterResolver.GetFormatterWithVerify<global::LiveScore.Core.Models.Odds.Bookmaker>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    case 2:
                        __OddsMovements__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.IEnumerable<global::LiveScore.Core.Models.Odds.OddsMovement>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
                    default:
                        readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }
                
                NEXT_LOOP:
                offset += readSize;
            }

            readSize = offset - startOffset;

            var ____result = new global::LiveScore.Soccer.Models.Odds.MatchOddsMovement(__MatchId__, __Bookmaker__, __OddsMovements__);
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
